/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientui;

import client.AudioSpeakerClient;
import client.ControlPanelClient;
import client.ProjectorClient;
import client.ThermostatClient;
import client.VideoRecorderClient;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import services.AudioSpeakerServer;
import services.ProjectorServer;
import services.ThermoStatServer;
import services.VideoRecorderServer;

/**
 *
 * @author stuar
 */
public class ControlPanelGUI extends javax.swing.JFrame implements ChangeListener {

    private ControlPanelClient client;
    private ProjectorClient projectorClient;
    private ThermostatClient thermoClient;
    private VideoRecorderClient vidClient;
    private AudioSpeakerClient speakerClient;
    private String machine = "";

    private ProjectorServer projectorServer = new ProjectorServer();
    ArrayList<String> inputs = new ArrayList<>(
            Arrays.asList("HDMI", "VGA", "USB-A", "USB-B", "USB-C", "IEEE 1394", "DVI")
    );
    ArrayList<String> aspectRatios = new ArrayList<>(
            Arrays.asList("16:9", "16:10", "4:3", "1:1", "1.2:1", "2.2:1", "21:9")
    );

    ArrayList<String> resolutions = new ArrayList<>(
            Arrays.asList("720p", "1080p", "1440p", "2K", "4K")
    );

    ArrayList<String> orientations = new ArrayList<>(
            Arrays.asList("Landscape", "Portrait", "Default")
    );

    ArrayList<String> modes = new ArrayList<>(
            Arrays.asList("Cool mode", "Dry mode", "Smart fan mode", "Energy saver mode")
    );

    ArrayList<String> shutDownTimes = new ArrayList<>(
            Arrays.asList("1", "2", "5", "8")
    );

    /**
     * Creates new form NewJFrame
     */
    public ControlPanelGUI() {
        initComponents();

    }

    public ControlPanelGUI(ControlPanelClient aThis) throws Exception {
        this();
        this.client = aThis;
        projectorTA.setText("Not connected" + "\n");
        speakersTA.setText("Not connected");
        thermoTA.setText("Not connected");
        videoTA.setText("Not connected");

        for (int i = 0; i < inputs.size(); i++) {
            projInputList.addItem(inputs.get(i));
        }

        for (int i = 0; i < aspectRatios.size(); i++) {
            ratiosList.addItem(aspectRatios.get(i));
        }

        for (int i = 0; i < resolutions.size(); i++) {
            resList.addItem(resolutions.get(i));
        }

        for (int i = 0; i < orientations.size(); i++) {
            orientationList.addItem(orientations.get(i));
        }

        for (int i = 0; i < modes.size(); i++) {
            fanModes.addItem(modes.get(i));
        }

        for (int i = 0; i < shutDownTimes.size(); i++) {
            shutdownList.addItem(shutDownTimes.get(i));
        }

        for (int i = 0; i < resolutions.size(); i++) {
            resListVid.addItem(resolutions.get(i));
        }
        
         for (int i = 0; i < inputs.size(); i++) {
            speakerInputsList.addItem(inputs.get(i));
        }

        brightnessControl();
        tempControl();
        zoomControl();
        volumeControl();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        setInputMachineBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        speakersActivateBtn = new javax.swing.JButton();
        videoActivateBtn = new javax.swing.JButton();
        thermoActivateBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        projActivateBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        videoTA = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        projectorTA = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        inputMachineTA = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        speakersTA = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        thermoTA = new javax.swing.JTextArea();
        projOffBtn = new javax.swing.JButton();
        listProjectorInputs = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        brightnessSlider = new javax.swing.JSlider();
        setRatioBtn = new javax.swing.JButton();
        projInputList = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        ratiosList = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        resList = new javax.swing.JComboBox<>();
        setResBtn = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        orientationList = new javax.swing.JComboBox<>();
        setOrientationBtn = new javax.swing.JButton();
        speakerOffBtn = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        volSlider = new javax.swing.JSlider();
        jLabel14 = new javax.swing.JLabel();
        speakerInputsList = new javax.swing.JComboBox<>();
        setSpeakerInput = new javax.swing.JButton();
        videoOffBtn = new javax.swing.JButton();
        vidRecordBtn = new javax.swing.JButton();
        stopRecordBtn = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        zoomSlider = new javax.swing.JSlider();
        jLabel15 = new javax.swing.JLabel();
        muteAudioBtn = new javax.swing.JButton();
        unMuteAudioBtn = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        resListVid = new javax.swing.JComboBox<>();
        setResolutionBtn = new javax.swing.JButton();
        thermoOffBtn = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        fanOnBtn = new javax.swing.JButton();
        fanOffBtn = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        tempSlider = new javax.swing.JSlider();
        jLabel19 = new javax.swing.JLabel();
        fanModes = new javax.swing.JComboBox<>();
        setFanModeBtn = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        shutdownList = new javax.swing.JComboBox<>();
        setShutDownBtn = new javax.swing.JButton();
        setProjInputBtn = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        brightnessIncreaseAmount = new javax.swing.JTextField();
        brightnessDecreaseAmount = new javax.swing.JTextField();
        brightnessIncreaseBtn = new javax.swing.JButton();
        brightnessDecreaseBtn = new javax.swing.JButton();
        listRatiosBtn = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        tempIncreaseAmount = new javax.swing.JTextField();
        decreaseTempAmount = new javax.swing.JTextField();
        increaseTempBtn = new javax.swing.JButton();
        decreaseTempBtn = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        zoomInAmount = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        zoomOutAmount = new javax.swing.JTextField();
        zoomInBtn = new javax.swing.JButton();
        zoomOutBtn = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        inVolAmount = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        deVolAmount = new javax.swing.JTextField();
        decreaseVolBtn = new javax.swing.JButton();
        increaseVolBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        setInputMachineBtn.setText("Set Machine");
        setInputMachineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setInputMachineBtnActionPerformed(evt);
            }
        });
        getContentPane().add(setInputMachineBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 150, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Control Panel");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(458, 16, 180, 20));

        speakersActivateBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        speakersActivateBtn.setForeground(new java.awt.Color(0, 204, 51));
        speakersActivateBtn.setText("On");
        speakersActivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speakersActivateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(speakersActivateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 60, -1));

        videoActivateBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        videoActivateBtn.setForeground(new java.awt.Color(0, 204, 102));
        videoActivateBtn.setText("On");
        videoActivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoActivateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(videoActivateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 590, -1, -1));

        thermoActivateBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        thermoActivateBtn.setForeground(new java.awt.Color(51, 204, 0));
        thermoActivateBtn.setText("On");
        thermoActivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thermoActivateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(thermoActivateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 590, 60, -1));

        jLabel2.setText("Choose Input Machine");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 70, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Projector");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, -1, -1));

        projActivateBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        projActivateBtn.setForeground(new java.awt.Color(0, 153, 102));
        projActivateBtn.setText("On");
        projActivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projActivateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(projActivateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 200, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Video-recorder");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Thermostat");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 590, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Speakers");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, -1, -1));

        videoTA.setColumns(20);
        videoTA.setRows(5);
        jScrollPane1.setViewportView(videoTA);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 620, 360, -1));

        projectorTA.setColumns(20);
        projectorTA.setRows(5);
        jScrollPane2.setViewportView(projectorTA);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 230, 490, 120));

        inputMachineTA.setColumns(20);
        inputMachineTA.setRows(5);
        jScrollPane3.setViewportView(inputMachineTA);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 70, 580, 70));

        speakersTA.setColumns(20);
        speakersTA.setRows(5);
        jScrollPane4.setViewportView(speakersTA);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 310, 110));

        thermoTA.setColumns(20);
        thermoTA.setRows(5);
        jScrollPane5.setViewportView(thermoTA);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 620, 390, -1));

        projOffBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        projOffBtn.setForeground(new java.awt.Color(255, 51, 51));
        projOffBtn.setText("Off");
        projOffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projOffBtnActionPerformed(evt);
            }
        });
        getContentPane().add(projOffBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 200, -1, -1));

        listProjectorInputs.setText("List inputs");
        listProjectorInputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listProjectorInputsActionPerformed(evt);
            }
        });
        getContentPane().add(listProjectorInputs, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 200, -1, -1));

        jLabel7.setText("Brightness");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 440, -1, -1));
        getContentPane().add(brightnessSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 470, 300, -1));

        setRatioBtn.setText("Set");
        setRatioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setRatioBtnActionPerformed(evt);
            }
        });
        getContentPane().add(setRatioBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 410, -1, -1));

        projInputList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projInputListActionPerformed(evt);
            }
        });
        getContentPane().add(projInputList, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 380, 120, -1));

        jLabel8.setText("Supported inputs");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 480, -1, -1));

        jLabel9.setText("Aspect ratios");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 350, -1, -1));

        ratiosList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratiosListActionPerformed(evt);
            }
        });
        getContentPane().add(ratiosList, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 380, 90, -1));

        jLabel10.setText("Set Resolution");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 350, -1, -1));

        resList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resListActionPerformed(evt);
            }
        });
        getContentPane().add(resList, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 380, 120, -1));

        setResBtn.setText("Set");
        getContentPane().add(setResBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 410, -1, -1));

        jLabel11.setText("Orientation");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 460, -1, -1));

        getContentPane().add(orientationList, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 490, 110, -1));

        setOrientationBtn.setText("Set");
        setOrientationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setOrientationBtnActionPerformed(evt);
            }
        });
        getContentPane().add(setOrientationBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 520, -1, -1));

        speakerOffBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        speakerOffBtn.setForeground(new java.awt.Color(255, 51, 0));
        speakerOffBtn.setText("Off");
        getContentPane().add(speakerOffBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 210, 60, -1));

        jLabel12.setText("Volume");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, -1, -1));
        getContentPane().add(volSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 360, 330, -1));

        jLabel14.setText("Supported inputs");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 350, -1, -1));

        getContentPane().add(speakerInputsList, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 480, 170, -1));

        setSpeakerInput.setText("Set input");
        setSpeakerInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSpeakerInputActionPerformed(evt);
            }
        });
        getContentPane().add(setSpeakerInput, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 510, -1, -1));

        videoOffBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        videoOffBtn.setForeground(new java.awt.Color(255, 0, 0));
        videoOffBtn.setText("Off");
        videoOffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                videoOffBtnActionPerformed(evt);
            }
        });
        getContentPane().add(videoOffBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 590, -1, -1));

        vidRecordBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        vidRecordBtn.setForeground(new java.awt.Color(255, 51, 0));
        vidRecordBtn.setText("Record");
        vidRecordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vidRecordBtnActionPerformed(evt);
            }
        });
        getContentPane().add(vidRecordBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 720, 100, -1));

        stopRecordBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        stopRecordBtn.setText("Stop");
        stopRecordBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopRecordBtnActionPerformed(evt);
            }
        });
        getContentPane().add(stopRecordBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 720, 110, -1));

        jLabel13.setText("Zoom");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 770, -1, -1));
        getContentPane().add(zoomSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 770, 430, -1));

        jLabel15.setText("Audio");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 860, -1, -1));

        muteAudioBtn.setText("Mute");
        muteAudioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteAudioBtnActionPerformed(evt);
            }
        });
        getContentPane().add(muteAudioBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 860, 90, -1));

        unMuteAudioBtn.setText("Unmute");
        unMuteAudioBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unMuteAudioBtnActionPerformed(evt);
            }
        });
        getContentPane().add(unMuteAudioBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 860, -1, -1));

        jLabel16.setText("Available resolutions");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 900, -1, -1));

        resListVid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resListVidActionPerformed(evt);
            }
        });
        getContentPane().add(resListVid, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 900, 170, -1));

        setResolutionBtn.setText("Set");
        setResolutionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setResolutionBtnActionPerformed(evt);
            }
        });
        getContentPane().add(setResolutionBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 940, -1, -1));

        thermoOffBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        thermoOffBtn.setForeground(new java.awt.Color(255, 51, 0));
        thermoOffBtn.setText("Off");
        thermoOffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thermoOffBtnActionPerformed(evt);
            }
        });
        getContentPane().add(thermoOffBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 590, 60, -1));

        jLabel17.setText("Fan");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 840, 40, 30));

        fanOnBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fanOnBtn.setForeground(new java.awt.Color(51, 0, 255));
        fanOnBtn.setText("Switch on");
        fanOnBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fanOnBtnActionPerformed(evt);
            }
        });
        getContentPane().add(fanOnBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 840, 130, -1));

        fanOffBtn.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        fanOffBtn.setForeground(new java.awt.Color(102, 102, 0));
        fanOffBtn.setText("Switch off");
        fanOffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fanOffBtnActionPerformed(evt);
            }
        });
        getContentPane().add(fanOffBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 840, 140, -1));

        jLabel18.setText("Temperature");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 730, -1, -1));
        getContentPane().add(tempSlider, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 730, 490, -1));

        jLabel19.setText("Fan modes");
        getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 880, -1, -1));

        fanModes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fanModesActionPerformed(evt);
            }
        });
        getContentPane().add(fanModes, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 880, 200, -1));

        setFanModeBtn.setText("Set");
        setFanModeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setFanModeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(setFanModeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 880, 80, -1));

        jLabel20.setText("Set shutdown time");
        getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 920, -1, -1));

        shutdownList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shutdownListActionPerformed(evt);
            }
        });
        getContentPane().add(shutdownList, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 920, 220, -1));

        setShutDownBtn.setText("Done");
        setShutDownBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setShutDownBtnActionPerformed(evt);
            }
        });
        getContentPane().add(setShutDownBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 950, -1, -1));

        setProjInputBtn.setText("Set Input");
        setProjInputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setProjInputBtnActionPerformed(evt);
            }
        });
        getContentPane().add(setProjInputBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 410, -1, -1));

        jLabel21.setText("Decrease Brightness");
        getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 540, -1, -1));

        jLabel22.setText("Increase Brightness");
        getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 510, -1, -1));
        getContentPane().add(brightnessIncreaseAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 510, 50, -1));
        getContentPane().add(brightnessDecreaseAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 540, 50, -1));

        brightnessIncreaseBtn.setText("OK");
        brightnessIncreaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessIncreaseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(brightnessIncreaseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 510, -1, -1));

        brightnessDecreaseBtn.setText("OK");
        brightnessDecreaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessDecreaseBtnActionPerformed(evt);
            }
        });
        getContentPane().add(brightnessDecreaseBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 540, -1, -1));

        listRatiosBtn.setText("List aspect ratios");
        listRatiosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listRatiosBtnActionPerformed(evt);
            }
        });
        getContentPane().add(listRatiosBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 200, -1, -1));

        jLabel23.setText("Decrease temperature");
        getContentPane().add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 800, -1, -1));

        jLabel24.setText("Increase temperature");
        getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 770, -1, -1));
        getContentPane().add(tempIncreaseAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 770, 70, -1));
        getContentPane().add(decreaseTempAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 800, 70, -1));

        increaseTempBtn.setText("OK");
        getContentPane().add(increaseTempBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 770, -1, -1));

        decreaseTempBtn.setText("OK");
        decreaseTempBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decreaseTempBtnActionPerformed(evt);
            }
        });
        getContentPane().add(decreaseTempBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 800, -1, -1));

        jLabel25.setText("Zoom in");
        getContentPane().add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 810, -1, -1));
        getContentPane().add(zoomInAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 810, 60, 30));

        jLabel26.setText("Zoom out");
        getContentPane().add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 810, -1, -1));
        getContentPane().add(zoomOutAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 810, 60, 30));

        zoomInBtn.setText("OK");
        zoomInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInBtnActionPerformed(evt);
            }
        });
        getContentPane().add(zoomInBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 810, -1, -1));

        zoomOutBtn.setText("Ok");
        zoomOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutBtnActionPerformed(evt);
            }
        });
        getContentPane().add(zoomOutBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 810, -1, -1));

        jLabel27.setText("Increase volume");
        getContentPane().add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 400, -1, -1));
        getContentPane().add(inVolAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 400, 50, -1));

        jLabel28.setText("Decrease volume");
        getContentPane().add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 440, -1, -1));
        getContentPane().add(deVolAmount, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 440, 50, -1));

        decreaseVolBtn.setText("OK");
        getContentPane().add(decreaseVolBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 440, -1, -1));

        increaseVolBtn.setText("OK");
        getContentPane().add(increaseVolBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 400, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setInputMachineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setInputMachineBtnActionPerformed
        inputMachineTA.append("Success! Control panel connected to: " + this.machine);
    }//GEN-LAST:event_setInputMachineBtnActionPerformed

    private void projActivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projActivateBtnActionPerformed
        // activate projector client
        projectorTA.setText("Please wait...");

        try {
            //new thread so client and server can run concurrently
            new Thread() {
                @Override
                public void run() {
                    try {
                        projectorServer.main(null);
                    } catch (Exception ex) {
                        Logger.getLogger(ControlPanelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }.start();

        } catch (RuntimeException e) {
            System.out.println("RPC failed: " + e);
            return;
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            System.out.println(e);
        }

        projectorClient = new ProjectorClient();
        projectorTA.setText("Projector activated and connected to: " + this.machine);
    }//GEN-LAST:event_projActivateBtnActionPerformed

    private void videoActivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoActivateBtnActionPerformed
        try {
            //new thread so client and server can run concurrently
            new Thread() {
                public void run() {
                    try {
                        VideoRecorderServer.main(null);
                    } catch (Exception ex) {
                        Logger.getLogger(ControlPanelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }.start();

        } catch (RuntimeException e) {
            System.out.println("RPC failed: " + e);
            return;
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            System.out.println(e);
        }
        vidClient = new VideoRecorderClient();
        videoTA.setText("Video recorder activated and connected to: " + this.machine);
    }//GEN-LAST:event_videoActivateBtnActionPerformed

    private void speakersActivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speakersActivateBtnActionPerformed
        // activate speaker client
        try {
            //new thread so client and server can run concurrently
            new Thread() {
                @Override
                public void run() {
                    try {
                        AudioSpeakerServer.main(null);
                    } catch (Exception ex) {
                        Logger.getLogger(ControlPanelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }.start();

        } catch (RuntimeException e) {
            System.out.println("RPC failed: " + e);
            return;
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            System.out.println(e);
        }
        speakerClient.main(null);
        speakersTA.setText("Audio Speaker activated and connected to: " + this.machine);
    }//GEN-LAST:event_speakersActivateBtnActionPerformed

    private void thermoActivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thermoActivateBtnActionPerformed
        // activate client
        try {
            //new thread so client and server can run concurrently
            new Thread() {
                public void run() {
                    try {
                        ThermoStatServer.main(null);
                    } catch (Exception ex) {
                        Logger.getLogger(ControlPanelGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            }.start();

        } catch (RuntimeException e) {
            System.out.println("RPC failed: " + e);
            return;
        }

        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            System.out.println(e);
        }
        thermoClient = new ThermostatClient();
        thermoTA.setText("Thermostat activated and connected to: " + this.machine);

    }//GEN-LAST:event_thermoActivateBtnActionPerformed

    private void projOffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projOffBtnActionPerformed

        try {
            projectorClient.deActivateProjector();
        } catch (InterruptedException ex) {
            Logger.getLogger(ControlPanelGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        projectorTA.append("\n" + "Projector deactivated");

    }//GEN-LAST:event_projOffBtnActionPerformed

    private void projInputListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projInputListActionPerformed

//        projInputList = new JComboBox();
//        
//        ArrayList<String> ls = new ArrayList<>(
//                //Arrays.asList("HDMI", "VGA", "USB-A", "USB-B", "USB-C", "IEEE 1394", "DVI")
//        );
//        ls.add("HDMI");
//
//        for (String value : ls) {
//            projInputList.addItem(value); 
//        }

    }//GEN-LAST:event_projInputListActionPerformed

    private void stopRecordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopRecordBtnActionPerformed
        vidClient.stopRecording();
        videoTA.append("\n" + "Recording stopped");
    }//GEN-LAST:event_stopRecordBtnActionPerformed

    private void fanOffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fanOffBtnActionPerformed
        thermoClient.shutdownFan();
    }//GEN-LAST:event_fanOffBtnActionPerformed

    private void listProjectorInputsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listProjectorInputsActionPerformed

        projectorClient.listInputs();

//        ArrayList<String> ls = new ArrayList<>(
//                Arrays.asList("HDMI", "VGA", "USB-A", "USB-B", "USB-C", "IEEE 1394", "DVI")
//        );
//
//        for (String s : ls) {
//            projectorTA.append(s + "\n");
//        }

    }//GEN-LAST:event_listProjectorInputsActionPerformed

    private void ratiosListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratiosListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ratiosListActionPerformed

    private void resListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resListActionPerformed

    private void setProjInputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setProjInputBtnActionPerformed
        String input = projInputList.getItemAt(projInputList.getSelectedIndex());
        projectorClient.setInput(input);
        projectorTA.append("\n" + input + " set as input type");
    }//GEN-LAST:event_setProjInputBtnActionPerformed

    private void brightnessIncreaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessIncreaseBtnActionPerformed
        manualIncreaseBrightnessControl();
    }//GEN-LAST:event_brightnessIncreaseBtnActionPerformed

    private void brightnessDecreaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessDecreaseBtnActionPerformed
        manualDecreaseBrightnessControl();
    }//GEN-LAST:event_brightnessDecreaseBtnActionPerformed

    private void listRatiosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listRatiosBtnActionPerformed
        projectorClient.listRatios();
    }//GEN-LAST:event_listRatiosBtnActionPerformed

    private void setRatioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setRatioBtnActionPerformed
        String ratio = ratiosList.getItemAt(ratiosList.getSelectedIndex());
        projectorClient.setAspectRatio(ratio);
        projectorTA.append("\n" + ratio + " set as aspect ratio");
    }//GEN-LAST:event_setRatioBtnActionPerformed

    private void setOrientationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setOrientationBtnActionPerformed
        String orientation = orientationList.getItemAt(orientationList.getSelectedIndex());
        projectorClient.setOrientation(orientation);
        projectorTA.append("\n" + orientation + " set as orientation");
    }//GEN-LAST:event_setOrientationBtnActionPerformed

    private void thermoOffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thermoOffBtnActionPerformed
        thermoClient.deActivateThermostat();

        thermoTA.append("\n" + "Thermostat deactivated");
    }//GEN-LAST:event_thermoOffBtnActionPerformed

    private void decreaseTempBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decreaseTempBtnActionPerformed
        manualDecreaseTempControl();
    }//GEN-LAST:event_decreaseTempBtnActionPerformed

    private void fanOnBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fanOnBtnActionPerformed
        thermoClient.triggerFan();
    }//GEN-LAST:event_fanOnBtnActionPerformed

    private void setFanModeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setFanModeBtnActionPerformed

        String input = fanModes.getItemAt(fanModes.getSelectedIndex());
        thermoClient.setFanMode(input);
        thermoTA.append("\n" + input + " selected");
    }//GEN-LAST:event_setFanModeBtnActionPerformed

    private void shutdownListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shutdownListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shutdownListActionPerformed

    private void fanModesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fanModesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fanModesActionPerformed

    private void setShutDownBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setShutDownBtnActionPerformed
        String time = "13.30";
        String input = shutdownList.getItemAt(shutdownList.getSelectedIndex());
        thermoClient.setShutDownTime(Integer.valueOf(input));
        thermoTA.append("\n" + "Thermostat will shut down in " + input + " hour(s) at " + time);
    }//GEN-LAST:event_setShutDownBtnActionPerformed

    private void videoOffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_videoOffBtnActionPerformed
        vidClient.deActivateVideoRecorder();

        videoTA.append("\n" + "Video recorder deactivated");
    }//GEN-LAST:event_videoOffBtnActionPerformed

    private void vidRecordBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vidRecordBtnActionPerformed
        vidClient.recordVideo();
        videoTA.append("\n" + "Recording.....");
    }//GEN-LAST:event_vidRecordBtnActionPerformed

    private void muteAudioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteAudioBtnActionPerformed
        vidClient.muteAudio();
        videoTA.append("\n" + "Audio muted");
    }//GEN-LAST:event_muteAudioBtnActionPerformed

    private void unMuteAudioBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unMuteAudioBtnActionPerformed
        vidClient.unmuteAudio();
        videoTA.append("\n" + "Audio unmuted");
    }//GEN-LAST:event_unMuteAudioBtnActionPerformed

    private void resListVidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resListVidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resListVidActionPerformed

    private void setResolutionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setResolutionBtnActionPerformed
        String res = resList.getItemAt(resList.getSelectedIndex());
        vidClient.setResolution(res);
        videoTA.append("\n" + res + " set as resolution");
    }//GEN-LAST:event_setResolutionBtnActionPerformed

    private void zoomInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInBtnActionPerformed
        manualZoomIn();
    }//GEN-LAST:event_zoomInBtnActionPerformed

    private void zoomOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutBtnActionPerformed
       manualZoomOut();
    }//GEN-LAST:event_zoomOutBtnActionPerformed

    private void setSpeakerInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSpeakerInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_setSpeakerInputActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlPanelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlPanelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlPanelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlPanelGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlPanelGUI().setVisible(true);

            }
        });

    }

    @Override
    public void stateChanged(ChangeEvent e) {
        projectorTA.append("Brightness: " + brightnessSlider.getValue());

    }

    public void appendDetectedMachine(String machineIP) {
        inputMachineTA.append(machineIP);
        this.machine = machineIP;
    }

    public void brightnessControl() {

        brightnessSlider.setMajorTickSpacing(10);
        brightnessSlider.setPaintLabels(true);
        brightnessSlider.setVisible(true);

        brightnessSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent event) {
                projectorTA.append("Brightness: " + brightnessSlider.getValue() + "\n");

            }
        });

    }

    public void manualIncreaseBrightnessControl() {

        projectorClient.increaseBrightness(Integer.valueOf(brightnessIncreaseAmount.getText()));
        projectorTA.append("+" + brightnessIncreaseAmount.getText() + "\n");

    }

    public void manualDecreaseBrightnessControl() {
        projectorClient.decreaseBrightness(Integer.valueOf(brightnessDecreaseAmount.getText()));
        projectorTA.append("-" + brightnessDecreaseAmount.getText() + "\n");
    }

    public void tempControl() {

        tempSlider.setMajorTickSpacing(5);
        tempSlider.setPaintLabels(true);
        tempSlider.setVisible(true);

        tempSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent event) {
                thermoTA.append("Temperature: " + tempSlider.getValue() + "\n");

            }
        });

    }

    public void manualIncreaseTempControl() {

        thermoClient.increaseTemp(Integer.valueOf(tempIncreaseAmount.getText()));
        thermoTA.append("+" + tempIncreaseAmount.getText() + "\n");

    }

    public void manualDecreaseTempControl() {
        thermoClient.decreaseTemp(Integer.valueOf(decreaseTempAmount.getText()));
        thermoTA.append("-" + decreaseTempAmount.getText() + "\n");
    }
    
    public void zoomControl() {

        zoomSlider.setMajorTickSpacing(5);
        zoomSlider.setPaintLabels(true);
        zoomSlider.setVisible(true);

        zoomSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent event) {
                videoTA.append("Zoom: " + zoomSlider.getValue() + "\n");

            }
        });

    }

    public void manualZoomIn() {
        vidClient.zoomIn(Integer.valueOf(zoomInAmount.getText()));
        videoTA.append("+" + zoomInAmount.getText() + "\n");

    }

    public void manualZoomOut() {
        vidClient.zoomOut(Integer.valueOf(zoomOutAmount.getText()));
        videoTA.append("-" + zoomOutAmount.getText() + "\n");
    }
    
     public void volumeControl() {

        volSlider.setMajorTickSpacing(10);
        volSlider.setPaintLabels(true);
        volSlider.setVisible(true);

        volSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent event) {
                speakersTA.append("Volume: " + volSlider.getValue() + "\n");

            }
        });

    }
     
     public void manualVolIncrease() {
        speakerClient.increaseVolume(Integer.valueOf(inVolAmount.getText()));
        speakersTA.append("+" + inVolAmount.getText() + "\n");

    }

    public void manualVolDecrease() {
        speakerClient.decreaseVolume(Integer.valueOf(deVolAmount.getText()));
        speakersTA.append("-" + deVolAmount.getText() + "\n");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField brightnessDecreaseAmount;
    private javax.swing.JButton brightnessDecreaseBtn;
    private javax.swing.JTextField brightnessIncreaseAmount;
    private javax.swing.JButton brightnessIncreaseBtn;
    private javax.swing.JSlider brightnessSlider;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JTextField deVolAmount;
    private javax.swing.JTextField decreaseTempAmount;
    private javax.swing.JButton decreaseTempBtn;
    private javax.swing.JButton decreaseVolBtn;
    private javax.swing.JComboBox<String> fanModes;
    private javax.swing.JButton fanOffBtn;
    private javax.swing.JButton fanOnBtn;
    private javax.swing.JTextField inVolAmount;
    private javax.swing.JButton increaseTempBtn;
    private javax.swing.JButton increaseVolBtn;
    private javax.swing.JTextArea inputMachineTA;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton listProjectorInputs;
    private javax.swing.JButton listRatiosBtn;
    private javax.swing.JButton muteAudioBtn;
    private javax.swing.JComboBox<String> orientationList;
    private javax.swing.JButton projActivateBtn;
    private javax.swing.JComboBox<String> projInputList;
    private javax.swing.JButton projOffBtn;
    private javax.swing.JTextArea projectorTA;
    private javax.swing.JComboBox<String> ratiosList;
    private javax.swing.JComboBox<String> resList;
    private javax.swing.JComboBox<String> resListVid;
    private javax.swing.JButton setFanModeBtn;
    private javax.swing.JButton setInputMachineBtn;
    private javax.swing.JButton setOrientationBtn;
    private javax.swing.JButton setProjInputBtn;
    private javax.swing.JButton setRatioBtn;
    private javax.swing.JButton setResBtn;
    private javax.swing.JButton setResolutionBtn;
    private javax.swing.JButton setShutDownBtn;
    private javax.swing.JButton setSpeakerInput;
    private javax.swing.JComboBox<String> shutdownList;
    private javax.swing.JComboBox<String> speakerInputsList;
    private javax.swing.JButton speakerOffBtn;
    private javax.swing.JButton speakersActivateBtn;
    private javax.swing.JTextArea speakersTA;
    private javax.swing.JButton stopRecordBtn;
    private javax.swing.JTextField tempIncreaseAmount;
    private javax.swing.JSlider tempSlider;
    private javax.swing.JButton thermoActivateBtn;
    private javax.swing.JButton thermoOffBtn;
    private javax.swing.JTextArea thermoTA;
    private javax.swing.JButton unMuteAudioBtn;
    private javax.swing.JButton vidRecordBtn;
    private javax.swing.JButton videoActivateBtn;
    private javax.swing.JButton videoOffBtn;
    private javax.swing.JTextArea videoTA;
    private javax.swing.JSlider volSlider;
    private javax.swing.JTextField zoomInAmount;
    private javax.swing.JButton zoomInBtn;
    private javax.swing.JTextField zoomOutAmount;
    private javax.swing.JButton zoomOutBtn;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables

}
